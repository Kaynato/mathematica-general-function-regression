All generated with parameters:
	InitFunctionData[5., {}, 0.2, NormalDistribution[1, 0.9], {}, {}];

010_polyn_pcjg_...
Polynomials (5, degrees 100, 100, 50, 20, 5):
	Generated with random parameters.
	Initialized position with random parameters.
	Extremely good performance.

Exponentials.
	#4 Exp[#1 #2] + #3
	Not normalized
		010_exp_pcjg_...
			Take care to start on the right concavity.
			005 particularly is notable for making it through the concavity issue (though slowly) as the error plot shows also.

Those with 50 data points were in 011.
Combinations of cosine and sine is poor.
Sums of sinusoidal and exponential were poor even with extraction of frequency to aid the initialization.

Angular Method:

	The angle method was obtained and an error surface was created.
	The angular method has the risk of discontinuity when the length of the data or the input vector is zero.
		This is patched with a piecewise definition, but this is not continuous either.

	Because using a gradient here would not work very well, I will use the nelder-mead method.

	== How to obtain an error surface:

	We find d = cos(Î¸) by taking the dot product of the normalized vectors.
		This gives us a range [-1, 1] where 1 is the target.
		We can take 1-d to have a range [2, 0] where 0 is the target, but this surface is not nice.
			See 012_a_osurf.pdf

		

